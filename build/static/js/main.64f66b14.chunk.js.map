{"version":3,"sources":["components/Form.js","components/Recipes.js","App.js","components/LoadPage.js","components/Recipe.js","components/About.js","components/Error.js","components/Navigation.js","components/Router.js","serviceWorker.js","index.js"],"names":["Form","props","onSubmit","getRecipe","style","marginBottom","className","type","name","Recipes","recipes","length","map","recipe","id","key","image","src","alt","label","substring","source","Link","to","pathname","state","APP_ID","APP_API","App","e","a","preventDefault","recipeName","target","elements","value","fetch","api_call","json","data","hits","setState","console","log","componentDidMount","localStorage","getItem","JSON","parse","componentDidUpdate","stringify","setItem","this","Component","LoadPage","Recipe","activeRecipe","title","location","req","res","Fragment","href","url","healthLabels","healthLabel","ingredients","ingredient","text","weight","React","About","Error","class","Navigation","NavLink","Router","BrowserRouter","Switch","Route","path","component","exact","Boolean","window","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.64f66b14.chunk.js","sourcesContent":["import React from 'react';\n\nconst Form = (props) => (\n  <form onSubmit={props.getRecipe} style={{ marginBottom: \"2rem\" }}>\n    <input className=\"form__input\" type=\"text\" name=\"recipeName\" />\n    <button className=\"form__button\">Search</button>\n  </form>\n)\n\nexport default Form;","import React from 'react';\nimport { Link } from \"react-router-dom\";\n\nconst Recipes = props => (\n  <div className=\"container\">\n    {props.recipes.length === 10 &&\n      <div className=\"row\">\n        {props.recipes.map((recipe) => {\n          return (\n            <div id=\"recipes-list__item\" key={recipe.recipe.image} className=\"col-md-4\" style={{ marginBottom: \"2rem\" }}>\n              <div className=\"recipes__box\">\n                <img\n                  className=\"recipe__box-img\"\n                  src={recipe.recipe.image}\n                  alt={recipe.recipe.label} />\n                <div className=\"recipe__text\">\n                  <h5 className=\"recipes__title\">\n                    {recipe.recipe.label.length < 20 ? `${recipe.recipe.label}` : `${recipe.recipe.label.substring(0, 25)}...`}\n                  </h5>\n                  <p className=\"recipes__subtitle\">Publisher: <span>{recipe.recipe.source}</span></p>\n                </div>\n                <button className=\"recipe_buttons\">\n                  <Link to={{\n                    pathname: `/recipe/${recipe.recipe.image}`,\n                    state: { recipe: recipe.recipe.label }\n                  }}>View Recipe</Link>\n                </button>\n              </div>\n            </div>\n          )\n        }\n        )}\n      </div>\n    }\n  </div>\n);\n\nexport default Recipes;\n","import React, { Component } from 'react';\nimport './App.css';\n\nimport Form from './components/Form';\nimport Recipes from './components/Recipes';\n\nconst APP_ID = \"34d187f5\";\nconst APP_API = \"91723cb18ae377899fd99c366f7f5099\"\n\n\nclass App extends Component {\n\n  state = {\n    recipes: []\n  }\n\n  getRecipe = async (e) => {\n    e.preventDefault();\n    const recipeName = e.target.elements.recipeName.value\n    const api_call = await fetch(`https://api.edamam.com/search?q=${recipeName}&app_id=${APP_ID}&app_key=${APP_API}`);\n\n    const data = await api_call.json();\n    const recipes = data.hits\n    this.setState({\n      recipes\n    })\n    console.log(\"data: \", this.state.recipes);\n  }\n\n  componentDidMount = () => {\n    const json = localStorage.getItem(\"recipes\");\n    const recipes = JSON.parse(json);\n    this.setState({ \n      recipes \n    })\n  }\n\n  componentDidUpdate = () => {\n    const recipes = JSON.stringify(this.state.recipes);\n    localStorage.setItem(\"recipes\", recipes);\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <Form getRecipe={this.getRecipe} />\n        <Recipes recipes={this.state.recipes} />\n      </div>\n    )\n  }\n}\n\nexport default App;\n","import React from 'react';\n\nconst LoadPage = () => {\n  return (\n    <div className=\"row\">\n      <h2>Create your snippet's HTML, CSS and Javascript in the editor tabs</h2>\n      <div id=\"loading\">\n        <ul className=\"bokeh\">\n          <li></li>\n          <li></li>\n          <li></li>\n        </ul>\n      </div>\n    </div>\n  )\n}\n\nexport default LoadPage; ","import React from 'react';\n\nimport { Link } from 'react-router-dom';\nimport LoadPage from './LoadPage';\n\nconst APP_ID = \"34d187f5\";\nconst APP_API = \"91723cb18ae377899fd99c366f7f5099\"\n\nclass Recipe extends React.Component {\n  state = {\n    activeRecipe: []\n  }\n\n  componentDidMount = async () => {\n    const title = this.props.location.state.recipe;\n    const req = await fetch(`https://api.edamam.com/search?q=${title}&app_id=${APP_ID}&app_key=${APP_API}`);\n\n    const res = await req.json();\n    this.setState({\n      activeRecipe: res.hits[0]\n    })\n    console.log(\"state: \", this.state.activeRecipe.recipe);\n  }\n\n  render() {\n    const recipe = this.state.activeRecipe.recipe;\n    console.log(\"recipe: \", recipe)\n    return (\n      <div className=\"container\">\n        {this.state.activeRecipe.length === 0 &&\n          <LoadPage />\n        }\n        {this.state.activeRecipe.length !== 0 &&\n          <React.Fragment>\n            <div className=\"active-recipe\">\n              <div className=\"row\">\n                <img className=\"col-md-6 active-recipe__img\" src={recipe.image} alt={recipe.label} />\n                <div className=\"col-md-6\">\n                  <h3 className=\"active-recipe__title\">{recipe.label}</h3>\n                  <h4 className=\"active-recipe__publisher\">\n                    Publisher: <span>{recipe.source}</span>\n                  </h4>\n                  <p className=\"active-recipe__website\">\n                    Website:\n              <span><a href={recipe.url} target=\"__blank\">{recipe.url < 20 ? `${recipe.url}` : `${recipe.url.substring(0, 25)}...`}</a></span>\n                  </p>\n                  <Link to=\"/\" className=\"active-recipe__button\">Go Home</Link>\n                  <div className=\"active-recipe__healthLabel\">\n                    {this.state.activeRecipe.recipe.healthLabels.map((healthLabel) => {\n                      return (\n                        <span>#{healthLabel} | </span>\n                      )\n                    })}\n                  </div>\n                </div>\n              </div>\n            </div>\n            <div className=\"active-recipe__ingredients\">\n            <h4 className=\"active-recipe__ingredientsTitle\">Ingredients</h4>\n              <ul>\n                {this.state.activeRecipe.recipe.ingredients.map((ingredient) => {\n                  return (\n                    <li>{ingredient.text}, Measuremen: {ingredient.weight} g</li>\n                  )\n                })}\n              </ul>\n\n            </div>\n          </React.Fragment>\n\n        }\n      </div>\n    )\n  }\n};\n\nexport default Recipe; ","import React from 'react';\n\nconst About = () => {\n  return (\n    <div>\n      <p>About</p>\n    </div>\n  )\n}\n\nexport default About;","import React from 'react';\nimport { Link } from 'react-router-dom';\n\nconst Error = () => {\n  return (\n    <div className=\"page-wrap d-flex flex-row align-items-center\">\n      <div className=\"container\">\n        <div className=\"row justify-content-center\">\n          <div className=\"col-md-12 text-center\">\n            <span className=\"display-1 d-block\">404</span>\n            <div className=\"mb-4 lead\">The page you are looking for was not found.</div>\n            <Link to=\"/\" class=\"btn btn-link\">Back to Home</Link>\n          </div>\n        </div>\n      </div>\n    </div>\n  )\n}\n\nexport default Error;","import React from 'react';\nimport { NavLink } from 'react-router-dom';\n\nconst Navigation = () => {\n  return (\n    <nav class=\"navbar navbar-light\" style={{ \"background-color\": \"#2c3e50\" }}>\n      <header className=\"App-header\">\n        <h1 className=\"App-title\">CELP</h1>\n      </header>\n      <NavLink to=\"/\">Home</NavLink>\n      <NavLink to=\"/shop\">Shop</NavLink>\n      <NavLink to=\"/about\">About</NavLink>\n    </nav>\n\n  )\n}\n\nexport default Navigation;","import React from 'react';\nimport { BrowserRouter, Switch, Route } from \"react-router-dom\";\n\nimport App from '../App';\nimport Recipe from \"./Recipe\";\nimport About from \"./About\";\nimport Error from './Error';\nimport Navigation from './Navigation';\n\nconst Router = () => (\n  <BrowserRouter>\n    <div>\n      <Navigation />\n      <Switch>\n        <Route path=\"/\" component={App} exact />\n        <Route path=\"/recipe/:id\" component={Recipe} />\n        <Route path=\"/about\" component={About} />\n        <Route component={Error} />\n      </Switch>\n    </div>\n\n  </BrowserRouter>\n)\n\nexport default Router;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.min.css'\nimport Router from './components/Router';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<Router />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}